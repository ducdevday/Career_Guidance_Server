// <auto-generated />
using System;
using CareerGuidance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CareerGuidance.Data.Migrations
{
    [DbContext(typeof(CareerGuidanceDBContext))]
    partial class CareerGuidanceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CareerGuidance.Data.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ThumnailUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TimeForReadType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeForReadValue")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BlogComment");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TiktokUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.CompanyIndustry", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId", "IndustryId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("UserIndustry");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.Property<double?>("RatingStar")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("ThumnalUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoAdsUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThumnalUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Mentor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiktokUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("IndustryId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Mentor");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Downs")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QnAPostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Ups")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("QnAPostId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("QnAComment");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnACommentInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDown")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUp")
                        .HasColumnType("bit");

                    b.Property<int>("QnACommentId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("QnACommentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("QnACommentInteraction");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Downs")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Replies")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Ups")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("QnAPost");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAPostInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDown")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUp")
                        .HasColumnType("bit");

                    b.Property<int>("QnAPostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("QnAPostId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("QnAPostInteraction");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("LessonId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TiktokUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("School");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.SchoolIndustry", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SchoolId", "IndustryId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SchoolIndustry");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.Property<double?>("RatingStar")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Thumnail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("IndustryId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.TourReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("TourId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TourReview");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("InsertById");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.UserEnrollCourse", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("UserEnrollCourse");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.UserEnrollTour", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "TourId");

                    b.HasIndex("InsertById");

                    b.HasIndex("TourId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("UserEnrollTour");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.UserEnrollWorkshop", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "WorkshopId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WorkshopId");

                    b.ToTable("UserEnrollWorkshop");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.Property<double?>("RatingStar")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Thumnail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("IndustryId");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Workshop");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.WorkshopReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("InsertById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsertById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WorkShopId");

                    b.ToTable("WorkshopReview");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Address", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Blog", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Industry", "Industry")
                        .WithMany("Blogs")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.BlogComment", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Chapter", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Company", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("CareerGuidance.Data.Entity.Company", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.CompanyIndustry", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Company", "Company")
                        .WithMany("CompanyIndustries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Industry", "Industry")
                        .WithMany("CompanyIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Industry");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Course", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Industry", "Industry")
                        .WithMany("Courses")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Industry", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Instructor", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Course", "Course")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Lesson", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Mentor", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Address", "Address")
                        .WithOne("Mentor")
                        .HasForeignKey("CareerGuidance.Data.Entity.Mentor", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Industry", "Industry")
                        .WithMany("Mentors")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Industry");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAComment", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.QnAPost", "QnAPost")
                        .WithMany("QnAComments")
                        .HasForeignKey("QnAPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("QnAPost");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnACommentInteraction", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.QnAComment", "QnAComment")
                        .WithMany("QnACommentInteractions")
                        .HasForeignKey("QnACommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("QnAComment");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAPost", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAPostInteraction", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.QnAPost", "QnAPost")
                        .WithMany("QnAPostInteractions")
                        .HasForeignKey("QnAPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("QnAPost");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Resource", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Lesson", "Lesson")
                        .WithMany("Resources")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("Lesson");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.School", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Address", "Address")
                        .WithOne("School")
                        .HasForeignKey("CareerGuidance.Data.Entity.School", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.SchoolIndustry", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Industry", "Industry")
                        .WithMany("SchoolIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.School", "School")
                        .WithMany("SchoolIndustries")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("InsertBy");

                    b.Navigation("School");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Tour", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Address", "Address")
                        .WithOne("Tour")
                        .HasForeignKey("CareerGuidance.Data.Entity.Tour", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Industry", "Industry")
                        .WithMany("Tours")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Industry");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.TourReview", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Tour", "Tour")
                        .WithMany("TourReviews")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("Tour");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.User", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.UserEnrollCourse", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Course", "Course")
                        .WithMany("UserEnrollCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "User")
                        .WithMany("UserEnrollCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.UserEnrollTour", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Tour", "Tour")
                        .WithMany("UserEnrollTours")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "User")
                        .WithMany("UserEnrollTours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("Tour");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.UserEnrollWorkshop", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "User")
                        .WithMany("UserEnrollWorkshops")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Workshop", "Workshop")
                        .WithMany("UserEnrollWorkshops")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Workshop", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.Address", "Address")
                        .WithOne("Workshop")
                        .HasForeignKey("CareerGuidance.Data.Entity.Workshop", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Industry", "Industry")
                        .WithMany("Workshops")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Industry");

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.WorkshopReview", b =>
                {
                    b.HasOne("CareerGuidance.Data.Entity.User", "InsertBy")
                        .WithMany()
                        .HasForeignKey("InsertById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerGuidance.Data.Entity.Workshop", "Workshop")
                        .WithMany("WorkshopReviews")
                        .HasForeignKey("WorkShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsertBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Address", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("Mentor");

                    b.Navigation("School");

                    b.Navigation("Tour");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Blog", b =>
                {
                    b.Navigation("BlogComments");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Company", b =>
                {
                    b.Navigation("CompanyIndustries");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Instructors");

                    b.Navigation("UserEnrollCourses");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Industry", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("CompanyIndustries");

                    b.Navigation("Courses");

                    b.Navigation("Mentors");

                    b.Navigation("SchoolIndustries");

                    b.Navigation("Tours");

                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Lesson", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAComment", b =>
                {
                    b.Navigation("QnACommentInteractions");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.QnAPost", b =>
                {
                    b.Navigation("QnAComments");

                    b.Navigation("QnAPostInteractions");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.School", b =>
                {
                    b.Navigation("SchoolIndustries");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Tour", b =>
                {
                    b.Navigation("TourReviews");

                    b.Navigation("UserEnrollTours");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.User", b =>
                {
                    b.Navigation("UserEnrollCourses");

                    b.Navigation("UserEnrollTours");

                    b.Navigation("UserEnrollWorkshops");
                });

            modelBuilder.Entity("CareerGuidance.Data.Entity.Workshop", b =>
                {
                    b.Navigation("UserEnrollWorkshops");

                    b.Navigation("WorkshopReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
